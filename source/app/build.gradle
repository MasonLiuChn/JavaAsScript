apply plugin: 'java'

/** 执行java工程（方法一）./gradlew run -PappArgs="['-u', 'myuser', 'some other argument', 'and/a/path']"
 **/
ext {
    defMainClassName = "com.example.Main"
}
apply plugin: 'application'
run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : project.ext.defMainClassName
}
defaultTasks 'run'

/** 执行java工程（方法二）  ./gradlew runApp -PmainClass="com.masonliu.wanfo.xuefo.TestCollector"
 **/
task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "com.masonliu.wanfo.xuefo.TestCollector2"
}

/** 打jar包  ./gradlew jar -PmainClass="com.masonliu.jiufu.TestJavaScript"
 **/
jar {
    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : project.ext.defMainClassName
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

/** 执行jar包 ./gradlew runJar -PappArgs="['-u', 'myuser', 'some other argument', 'and/a/path']"
 **/
task runJar(type: Exec) {
    def myArgs = ["java", "-jar", "${project.buildDir}/libs/app_java.jar"]
    if (project.hasProperty("appArgs")) {
        def args = Eval.me(appArgs)
        myArgs.addAll(args)
    }
    commandLine myArgs
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
}
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
